---
- name: Create a ec2 key pair
  ec2_key:
    name: "{{ ec2_key_name }}"
    force: false
    state: present
  register: key

- name: output secret key file
  shell: echo "{{ key.key.private_key }}" > {{ key.key.name }}.pem
  when: key.key.private_key is defined

- name: Facts about default VPC
  ec2_vpc_net_facts:
    filters:
      isDefault: "true"
  register: vpc_net_find

- name: Facts about default VPC subnet
  ec2_vpc_subnet_facts:
    filters:
      vpc-id: "{{ vpc_net_find.vpcs[0].id}}"
  register: vpc_subnet_find

- name: Create a EC2 security group
  ec2_group:
    name: "{{ ec2_group }}"
    description: "{{ ec2_group_desc }}"
    vpc_id: "{{ vpc_net_find.vpcs[0].id }}"
    region: ap-northeast-1
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
        cidr_ipv6: ::/0
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
        cidr_ipv6: ::/0

- name: Search for the latest Amazon Linux AMI
  ec2_ami_find:
    name: "amzn-ami-hvm-*-gp2"
    owner: amazon
    architecture: x86_64
    virtualization_type: hvm
    sort: creationDate
    sort_order: descending
    sort_end: 1
    no_result_action: fail
  register: ami_find

- name: Launch EC2 Instance
  ec2:
    image: "{{ ami_find.results[0].ami_id }}"
    instance_type: "{{ ec2_instance_type }}"
    key_name: "{{ ec2_key_name }}"
    vpc_subnet_id: "{{ vpc_subnet_find.subnets[0].id }}"
    group: "{{ ec2_group }}"
    assign_public_ip: true
    instance_tags:
      Name: "{{ ec2_name }}"
    count_tag:
      Name: "{{ ec2_name }}"
    exact_count: 1
    wait: true
  register: ec2

# if ec2_eip variable is set
- name: Associate Elastic IP with the instance
  ec2_eip:
    device_id: "{{ item }}"
    ip: "{{ ec2_eip }}"
  with_items: "{{ ec2.instance_ids }}"
  when: ec2_eip is defined

# if ec2_eip variable is not set
- name: Associate new Elastic IP with the instance
  ec2_eip:
    device_id: "{{ item }}"
  with_items: "{{ ec2.instance_ids }}"
  register: eip
  when: ec2_eip is not defined

- name: output EIP address
  debug: var=eip
  when: eip.results[0].changed
